///////////////////////////////////////////////////
//      SHOTGUN FRENZY
//   a mod by Wad'a'Holic

// f_SecMan.acs
// manages the sectors

#library "f_SecMan"
#import "f_IntDB.acs"
#import "f_Tip.acs"
#import "fl_techs.acs"
#include "zcommon.acs"
#include "samu_tools.ach"

function int m_CalcSector (void)
{
    // locals
    int l_Result;
    
    // check demon count (per sector)
    m_InSector[0] = thingcount(0, 111);
    m_InSector[1] = thingcount(0, 112);
    m_InSector[2] = thingcount(0, 113);
    m_InSector[3] = thingcount(0, 114);
    
    if (g_Status == 1)      l_Result = m_InSector[0];
    if (g_Status == 2)      l_Result = m_InSector[0] + m_InSector[1];
    if (g_Status == 3)      l_Result = m_InSector[1] + m_InSector[2];
    if (g_Status == 4)      l_Result = m_InSector[2] + m_InSector[3];
    
    return l_Result;
}

function int m_CalcTotal (void)
{
    // locals
    int l_Result;
    
    // count total demons
    l_Result = thingcount(0, 111) + thingcount(0, 112) + thingcount(0, 113) + thingcount(0, 114);
    
    return l_Result;
}

// setup comm cash and wait for players to enter the game
script 51 OPEN
{
    // setup default credits for the commander
    c_Credits = c_Startcash;
    
    while(playercount() == 0) delay(1);
    g_Status = 1; 
}

function int SecMan_RecapCond(int sector){
	return (m_CalcSector() < 5 && sector > 1);
}

Function void SecMan_ToggleDoors(bool closed, int sector, int doortype, int doorspeed){
	int i = 0;

	if(closed){
		if (doortype == 0)
			for(i = sector; i <= 4; i++){
				ceiling_lowerandcrush(100 + i, doorspeed, 2);
				ceiling_lowerandcrush(99 + i, doorspeed, 2);
			}
		else
			for(i = sector; i <= 4; i++){
				floor_raisetohighest(100 + i, doorspeed);
				floor_raisetohighest(99 + i, doorspeed);
			}
	}else { // 1 Line madness.
		if (doortype == 0) for(i = 1; i <= sector; i++) door_open(100+i, doorspeed);
		else for(i = 1; i <= sector; i++) floor_lowertolowest(100+i, doorspeed);
	}

}

Function void SecMan_ToggleCores(int sector){
	for(int i = 1; i <= 4; i++){
		if(i == sector) Thing_Activate(100 + i);
		else 			Thing_DeActivate(100 + i);
	}
}

int alarmsUsed = 0;

Script "SFPlus_SectorManagerMainLoop" OPEN {
	// Same Script, but without the termination riskes.
	floor_raisetonearest(105, 50);
	int current_sector;
	int time;
	int timecvar = GetCvar("sf_doorholdtime");
	bool skip_recap = false;
	while(!g_GameOver){
		skip_recap = false;
		while(g_Status == 0) // Be prepared to start.
			delay(35);
			
		current_sector = g_Status;
		delay(1);
		
		time = timecvar;
		acs_execute(129, 0, 1, time, 0);
		while(time != 0){// The timer before opening a door.
			if(time == 10 || time == 5){
				Notify_Message("DOORS BREACHED!",strParam(d:time, s:" secs left!"), "INFO", 0);
				
			}

			if (SecMan_RecapCond(g_Status)){
				// Check again if the sector is actually clear.
				delay(1);
				acs_terminate(129, 0);// Kill the timer script.
				SecMan_ToggleDoors(1, g_Status, f_Doortype, f_Doorspeed); // Close them again.
				acs_execute(103, 0, 0, 0, 0);
				
				skip_recap = true;
				break; // Break the time wait-up
			}

			if(Time <= 5){
				if (alarmsUsed == 0){
					ambientsound("TIME", 125);
				}
			}

			delay(35);
			time--;
		}
		
		Notify_Message("DOORS BREACHED!","Demons are entering!", "INFO", 0);
		if (alarmsUsed == 0){
			ambientsound("ATTACK", 125);
		}
		alarmsUsed += 1;
	
		// breached sound
		if(!skip_recap){
			switch(g_Status)
			{
				case 1:
					ambientsound("cv/sector1", 125);
					break;
				case 2:
					ambientsound("cv/sector2", 125);
					break;
				case 3:
					ambientsound("cv/sector3", 125);
					break;
				case 4:
					ambientsound("cv/sector4", 125);
					break;
			}
		}
    
    // open doors/gates
		SecMan_ToggleDoors(0, g_Status, f_Doortype, f_Doorspeed);
		SecMan_ToggleCores(g_Status);// Protects the cores from any damage if they're not risked.
		
		while (current_sector == g_Status && !skip_recap){ 
			// While there is no updates on the sector control or we already did a quick re-cap.
			if (SecMan_RecapCond(g_Status)){
				SecMan_ToggleDoors(1, g_Status, f_Doortype, f_Doorspeed);
				acs_execute(103, 0, 0, 0, 0);
				break;
			}
			delay(5);
		}
		
		delay(35 * 2);// Giving it 1 tic will make this script a lotta aggesive.
	}
}

// sector open
script 100 OPEN
{
	/*
    // activate beginning lift
    floor_raisetonearest(105, 50);
    
    // locals
    int l_CurrentSector;
    
    // wait until the game is active
    while(g_Status == 0)
        delay(35);
    
    // setup current sector
    l_CurrentSector = g_Status;
    
    // the game has started
	// [Samu] Let it be parametrizable!
	int time = GetCvar("sf_doorholdtime");
	
	if(time < 15) time = 15; // Just to keep a default timer.
	acs_execute(129, 0, 1, time, 0);
	Notify_Message("DOORS BREACHED!",strParam(d:time, s:" secs left!"), "INFO", 0);
	//f_TipShow("INFO", "DOORS BREACHED!", strParam(d:time, s:" seconds..."), 0);
	
	while(time != 0){
		if(time == 10 || time == 5){
			Notify_Message("DOORS BREACHED!",strParam(d:time, s:" secs left!"), "INFO", 0);
			
		}
		
		if (m_CalcSector() == 0 && g_Status > 1){
			// Check again if the sector is actually clear.
			delay(1);
			acs_terminate(129, 0);// Kill the timer script.
            acs_execute(103, 0, 0, 0, 0);
			printbold(s:"Quick recapture.");
			terminate;
        }
		
		if(Time <= 5){
			if (alarmsUsed == 0){
				ambientsound("TIME", 125);
			}
		}
		
		delay(35);
		time--;
	}
	Notify_Message("DOORS BREACHED!","Demons are entering!", "INFO", 0);
	if (alarmsUsed == 0){
		ambientsound("ATTACK", 125);
	}
    alarmsUsed += 1;
	
    // breached sound
    switch(g_Status)
    {
        case 1:
            ambientsound("cv/sector1", 125);
            break;
        case 2:
            ambientsound("cv/sector2", 125);
            break;
        case 3:
            ambientsound("cv/sector3", 125);
            break;
        case 4:
            ambientsound("cv/sector4", 125);
            break;
    }
    
    // open doors/gates
    if (f_Doortype == 0)
    {
	if (100+g_Status == 101){
		door_open(101, f_Doorspeed);
	}
	else if (100+g_Status == 102){
		door_open(101, f_Doorspeed);
		door_open(102, f_Doorspeed);
	}
	else if (100+g_Status == 103){
		door_open(101, f_Doorspeed);
		door_open(102, f_Doorspeed);
		door_open(103, f_Doorspeed);
	}
	else if (100+g_Status == 104){
		door_open(101, f_Doorspeed);
		door_open(102, f_Doorspeed);
		door_open(103, f_Doorspeed);
		door_open(104, f_Doorspeed);
	}
    }
    else
    {
	if (100+g_Status == 101){
		floor_lowertolowest(101, f_Doorspeed);
	}
	else if (100+g_Status == 102){
		floor_lowertolowest(101, f_Doorspeed);
		floor_lowertolowest(102, f_Doorspeed);
	}
	else if (100+g_Status == 103){
		floor_lowertolowest(101, f_Doorspeed);
		floor_lowertolowest(102, f_Doorspeed);
		floor_lowertolowest(103, f_Doorspeed);
	}
	else if (100+g_Status == 104){
		floor_lowertolowest(101, f_Doorspeed);
		floor_lowertolowest(102, f_Doorspeed);
		floor_lowertolowest(103, f_Doorspeed);
		floor_lowertolowest(104, f_Doorspeed);
	}
    }
    
    // can reclaim?
    while (l_CurrentSector == g_Status)
    {
        if (m_CalcSector() == 0 && g_Status > 1)
        {
            acs_execute(103, 0, 0, 0, 0);
            break;
        }
        
        delay(5);
    }
	*/
}

// sector lost (upon battery destruction)
script 102 (void)
{
    delay(35);
    
    // make sure there aren't any more batteries in the sector
    if (thingcount(0, 100 + g_Status) > 0)
    {
        //f_TipShow("INFO", "Battery Status", "One of our batteries have been destroyed!", 9);
		Notify_Message("BATTERY DOWN!","One of our batteries has been destroyed!", "INFO", 0);
        terminate;
    }
    
    ambientsound("cv/batterydestroyed", 125);
    
    // message
    switch (g_Status)
    {
        case 1:
            Notify_Message("Sector 1 CORE DESTROYED!","We've lost the control of Sector 1", "INFO", 3);
            break;
        case 2:
            Notify_Message("Sector 2 CORE DESTROYED!","We've lost the control of Sector 2", "INFO", 3);
            break;
        case 3:
            Notify_Message("Sector 2 CORE DESTROYED!","We've lost the control of Sector 3", "INFO", 3);
            break;
        case 4:
            Notify_Message("Main CORE DESTROYED!", "The Hell Forces wins this round!", "INFO", 3);
            acs_execute(125, 0, 4, 0, 0);
            break;
    }
    
    // change sectors
    g_Status ++;
    delay(35 * 2);
    
    // recall sector open script
	/*
    if (g_Status < 5){
        acs_execute(100, 0, 0, 0, 0);}
		*/
    
        
        // hate the next area
        thing_hate(109, g_Status + 100, 4);
	if(g_Status == 1){
        	thing_hate(110, g_Status + 100, 4);
        }
	if(g_Status == 2){
        	thing_hate(110, g_Status + 100, 4);
        	thing_hate(111, g_Status + 100, 4);
        }
	if(g_Status == 3){
        	thing_hate(110, g_Status + 100, 4);
        	thing_hate(111, g_Status + 100, 4);
        	thing_hate(112, g_Status + 100, 4);
        }
	if(g_Status == 4){
        	thing_hate(110, g_Status + 100, 4);
        	thing_hate(111, g_Status + 100, 4);
        	thing_hate(112, g_Status + 100, 4);
        	thing_hate(113, g_Status + 100, 4);
        }
}

// sector reclaimed
script 103 (void)
{
	int i;
	/*
    // close doors/gates
    if (f_Doortype == 0)
    {
		// Make sure the other sectors that aren't risked are completly shut. 
		for(i = g_Status; i <= 4; i++){
			ceiling_lowerandcrush(100 + i, f_Doorspeed, 2);
			ceiling_lowerandcrush(99 + i, f_Doorspeed, 2);
		}
        ambientsound("g/sector_reclaim", 125);
    }
    else
    {
		// Make sure the other sectors that aren't risked are completly shut. 
		for(i = g_Status; i <= 4; i++){
			floor_raisetohighest(100 + i, f_Doorspeed);
			floor_raisetohighest(99 + i, f_Doorspeed);
		}
        ambientsound("g/sector_reclaim", 125);
    }
	*/
	
	ambientsound("g/sector_reclaim", 125);
    
    // change sectors
    if (g_Status > 1)
        g_Status --;
		
	//[Samu] To refresh their fighting-spirit.
		refreshPlayers();
	//[Samu] Give a reward for everyone.
		sethudsize(800, 600, 0);
		setfont("CONFONT");
		switch(g_Status){
			case 1:
			  hudmessageBOLD(s:"Sector 1 recover Bonus!\n+5000 Credits Added!\n+1 Berserk and Godsphere!\n+3 Megaspheres!\n+2 Upgrade Points!";
				2, 6, cr_Blue, 400.0, 480.1, 6.0);
				//[Samu] It's hard to recover this sector, so let's give it a juicy reward.
			  giveCashToPlayers(5000);
			  giveUPToPlayers(2);
			  giveItemToPlayers("Inventory_Godsphere", 1);
			  giveItemToPlayers("Inventory_Berserk2", 1);
			  giveItemToPlayers("Inventory_Megasphere", 3);
			break;
			case 2:
			  hudmessageBOLD(s:"Sector 2 recover Bonus!\n+2500 Credits Added!\n+1 Berserk!\n+2 Megaspheres!\n+1 Upgrade Points!";
				2, 6, cr_Blue, 400.0, 480.1, 6.0);
			  //[Samu] Not much people can pull off this one, but its possible to do.
			  giveCashToPlayers(2500);
			  giveUPToPlayers(1);
			  giveItemToPlayers("Inventory_Berserk2", 1);
			  giveItemToPlayers("Inventory_Megasphere", 2);
			break;
			case 3:
			  //[Samu] Easy to get, just give a simple reward.
			  hudmessageBOLD(s:"Sector 3 recover Bonus!\n+1000 Credits Added!\n+1 Megasphere!";
				2, 6, cr_Blue, 400.0, 480.1, 6.0);
			  giveCashToPlayers(1000);
			  giveItemToPlayers("Inventory_Megasphere", 1);
			break;
		}
		sethudsize(0, 0, 0);
	//[Samu] Now the sector recovery should worth the effort now!
        
    delay(1);
    
        // hate the next area
        thing_hate(109, g_Status + 100, 4);
	if(g_Status == 1){
        	thing_hate(110, g_Status + 100, 4);
        }
	if(g_Status == 2){
        	thing_hate(110, g_Status + 100, 4);
        	thing_hate(111, g_Status + 100, 4);
        }
	if(g_Status == 3){
        	thing_hate(110, g_Status + 100, 4);
        	thing_hate(111, g_Status + 100, 4);
        	thing_hate(112, g_Status + 100, 4);
        }
	if(g_Status == 4){
        	thing_hate(110, g_Status + 100, 4);
        	thing_hate(111, g_Status + 100, 4);
        	thing_hate(112, g_Status + 100, 4);
        	thing_hate(113, g_Status + 100, 4);
        }
        
        
        
    // message
    switch (g_Status)
    {
        case 1:
            Notify_Message("Sector 1 Recovered!", "The Sector 1 CORE has been restored!", "INFO", 1);
            thing_raise(101);
            break;
        case 2:
            Notify_Message("Sector 2 Recovered!", "The Sector 2 CORE has been restored!", "INFO", 1);
            thing_raise(102);
            break;
        case 3:
            Notify_Message("Sector 3 Recovered!", "The Sector 3 CORE has been restored!", "INFO", 1);
            thing_raise(103);
            break;
    }
    
    
    delay(35 * 2);
    
    // recall sector open script
    acs_execute(100, 0, 0, 0, 0);
    
    // kill any left over demons
    delay(35 * 3);
    thing_destroy(110 + g_Status, 500);
}

int secdelay;

// enter/exit sector
script 104 (int l_Type, int l_Bypass, int l_ExecuteAlways)
{
    // terminate if bot
    if (playerisbot(playernumber()) && l_Bypass == 0)        terminate;
    
    // special portal?
    if (g_SpecialPortal > 0 && l_Bypass == 0)
    {
        teleport_nostop(g_SpecialPortal, 0, 0);
        terminate;
    }
    
    // enter sector
	if (l_Type == 0)
	{
		if (g_Status < 4)
		{
			if(l_ExecuteAlways == 0)
			{
				ACS_ExecuteAlways(104,0,0,0,1);
				terminate;
			}
			
			if(secdelay > 0) //Too soon after the previous player entered the teleport?
			{
				teleport_nostop(120, 0, 0);
				Print(s:"Please give the player enough time to move away from the teleport destination spot.");
				terminate;
			}
			
			teleport_nostop(120 + g_Status, 0, 0);
			if(p_TankSlot[playernumber()] == 2) secdelay = 2; //Give tank more time
			else secdelay = 2; //Players
			if(PlayerCount() < 3){
				Notify_Player("Entered the Sector", "PLAYER", 0);
			}
			delay(secdelay);
			secdelay = 0;
		}
		else
		{
			if (g_GuardianMode == 0) {
				// a nice pretty message
				sethudsize(s_ScreenSize[0], s_ScreenSize[1], s_ScreenSize[2]);
				setfont("BCOUNT");
				hudmessage(s:"a"; 2, 180, CR_Gold, 0.1, 0.1, 5.0);
				setfont("BIGFONT");
				hudmessage(s:"Teleporter Offline!"; 1, 178, CR_Gold, 570.0, 390.1, 5.0);
				setfont("CONFONT");
				hudmessage(s:"The area is overrun!\nCannot teleport to sector"; 2, 179, CR_Gold, 580.0, 420.1, 1.0);
			}
			else {
				// open sector selection menu
				acs_execute(155, 0, 52, 0, 0);
			}
		}
	}
    
    // exit sector
    if (l_Type == 1)
    {
        teleport_nostop(120, 0, 0);
        if(PlayerCount() < 3){
             Notify_Player("LEFT from sector", "PLAYER", 0);
        }
    }
}
