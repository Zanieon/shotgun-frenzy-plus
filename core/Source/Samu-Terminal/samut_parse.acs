/**
*
* 	<samut_parse.acs> 
* 	Some helper functions to parse values 
*	and make quick and clear components without so much verbosity!
*
**/

int propb[30][3];
int propb_top;
int propstr; // Variable holder.

function void PropBuffer_allocate(str name, str value){
// Save the key, value to the buffer. Raise the stack.
	//0 = Name of the property.
	//1 = Value of  the property
	propb[propb_top][0] = name;
	propb[propb_top][1] = value;
	propb_top++;
}

function void PropBuffer_purge(void){
// Clean everything, and pop it all the stack.
	for(int j = 0; j < propb_top; j++){
		propb[j][0] = 0; propb[j][1] = 0;
	}
	propb_top = 0;
}

function void Parser_Read(str props){
// Read a string. And fills the buffer with key=value.
// Example: "prop1=val1, prop2=val2;"
//			In prop1 now is val1, in prop2 now is val2.
	PropBuffer_purge();
	int length = StrLen(props);
	bool readValue = false;
	str name, value, skipp=false;
	for(int i = 0; i < length; i++){
		int ch = GetChar(props,i);
		
		if(ch == ';'){
			PropBuffer_allocate(name, value);
			break;
		}
		
		if(ch == ','){
			PropBuffer_allocate(name, value);
			readValue = false;
			name = "", value = "";
			continue;
		}
		
		if(ch == '='){ 
			readValue = true;
			continue;
		}
		
		if(ch == ' ') continue;
		else{ 
			if(readValue) value = StrAddChar(value, ch);
			else name = StrAddChar(name, ch);
		}
	}
}
// To use this parser to your component, you must:

// 1) Make a function that calls Parser_read(); and then 
//    calls another function in a loop.

// 2) That function will compare if a string is equal to another string.
//    The first string to compare is the property name to be desired,
//    and the second the input.
//	  If there is a match (I prefer insensitive case) 
//	  set the property with the value parser functions!

// If you need the string only, just use the value without parsing!

/*	An example taken from samu_comps_ibtn.acs

	function void ImgButtonProp_Parse(int i, str name,str value){
		//Parses all strings to the properties of the component..
		if(StrIEquals(name,  "image")){
			setImgButtonImage(i, Prop_Value(value));
			return;
		}if(StrIEquals(name, "hoverimage")){
			setImgButtonHoverImage(i, Prop_Value(value));
			return;
		}if(StrIEquals(name, "tag")){
			setImgButtonTag(i, Prop_Value(value));
			return;
		}if(StrIEquals(name, "execute")){
			setImgButtonExecute(i, Prop_Const(value));
			return;
		}
	}

	function void SetImgButtonProps(int id, str props){
		Parse_Read(props);
	
		for(int j = 0; j < propb_top; j++){
			ImgButtonProp_Parse(id, propb[j][0], propb[j][1]);
		}
	
	}
*/
//Want to generate a prop string without making it youself? and dynamically?

//These functions will help!
function void Prop_StrDef_Start(str holder){
	//The prop string generation will start from here.
	//You can also pass a string to give a continuation to the string!
	propstr = holder;
}

function void Prop_StrDef_Add(int valueType, str name, str value){
	//Adds a new property to the string 
	// (Note, not even start and this cant return values... yet!)
	str property = name;
	property = StrAdd(property, "=");
	switch(valuetype){
		case ST_PSTR_INT: property = StrAdd(property, itos(value)); break;
		default:
		case ST_PSTR_STR: property = StrAdd(property, value); break;
	}
	
	propstr = StrAdd(propstr, StrAdd(property,", "));
}

function str Prop_StrDef_End(void){ 
	//Get your generated prop string right out of the oven!
	propstr = StrReplaceLast(propstr, ",", ";");
	return propstr;
}

function int Prop_Const(str cons){
	//Put the equal constants that you wish to parse it up.
	//As long as you need it, you can expand this to 
	//whatever constants you want to hold.
	if(strIEquals(cons,"STEXE_GTCAT")) return STEXE_GTCAT;
	if(strIEquals(cons,"STEXE_CLOSE")) return STEXE_CLOSE;
	return -9999;
}

function int Prop_Value(str value){

	//Parse a true or false
	if(strIEquals(value,"false")) return false;
	else if (strIEquals(value,"true")) return true;
	
	//Parse a Color
	int cr = ParseColor(value);
	if(cr != -1) return cr;
	
	//Parse an int.
	//Check if its a constant (defined on Prop_Const function.)
	int cons = Prop_Const(value);
	if(cons != -9999) return cons;
	// else, it's just another int.
	ParseInt(value, 10);
	
	if(r1 == PARSENUMBER_SUCCESS){
		return r2;
	}
	//Parse an fixed.
	ParseFixed(value, 10);
	if(r1 == PARSENUMBER_SUCCESS){
		return r2;
	}

	//Give it up, use a string then.
	return value;
}

function int ParseColor(str color){
	// Some of the possible colors.
	if(strIEquals(color,"red"))    return CR_RED;
	if(strIEquals(color,"green"))  return CR_GREEN;
	if(strIEquals(color,"orange")) return CR_ORANGE;
	if(strIEquals(color,"yellow")) return CR_YELLOW;
	if(strIEquals(color,"cyan"))   return CR_CYAN;
	if(strIEquals(color,"blue"))   return CR_BLUE;
	if(strIEquals(color,"black"))  return CR_BLACK;
	if(strIEquals(color,"purple")) return CR_PURPLE;
	if(strIEquals(color,"white"))  return CR_WHITE;
	return -1;
}